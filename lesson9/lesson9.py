from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import DeclarativeBase


"""
Прежде всего для подключения к базе данных необходима строка подключения,
 которая включает адрес базы данных и другие различные параметры, необходимые для подключения. 
 Для разных СУБД строка подключения может отличаться. Пример строки подключения к SQLite:
"""
SQLALCHEMY_DB_URL = "sqlite:///./sql_app.db"


"""
Модели представляют классы, которые соответствуют определению таблиц в базе данных и объекты которых хранятся в этих таблицах. 
И одним из преимуществ SQLAlchemy является то, что мы можем работать таблицами через эти модели-классы языка Python, не прибегая к созданию запросов на языке SQL.

Для создания моделей необходима базовая модель, от которой потом наследуются остальные модели. 
Для создания базовой модели можно использовать различные способы, но самый короткий - создания класса модели с помощью функции declarative_base():"""
class Base(DeclarativeBase): pass

# То есть в данном случае определяется класс Base - базовая модель.
# Затем уже можно определить конкретные модели, данные которых будут храниться в БД. Например:
class Person(Base):
    __tablename__ = "people" # название таблицы с которой будем работать

    # столбцы в таблице people
    id = Column(Integer, primary_key=True, index=True) # первичный ключ с созданием индекса
    name = Column(String)
    age = Column(Integer)




# создание движка
engine = create_engine(
    SQLALCHEMY_DB_URL, connect_args={"check_same_thread": False}
)

"""
Первый параметр функции указывает на строку подключения - то есть по сути базу данных, к которой идет подключение.

Второй параметр - дополнительные параметры подключения в виде словаря connect_args. В частности, элемент "check_same_thread":
 False предназначен только для SQLite и указывает, что для взаимодействия с базой данных SQLite в рамках одного запроса 
 может использоваться больше одного потока. Зачем это надо? По умолчанию SQLite разрешает взаимодействовать с БД только 
 одному потоку, чтобы один поток обрабатывал отдельный запрос, что позволяет предотвратить использование одного потока для
  разных запросов. Но в FastAPI в рамках одного и того же запроса с базой данных могут взаимодействовать более одного потока.
   Собственно поэтому необходима подобная настройка для получения необходимых разрешений.
    При этом каждый запрос будет получать 
свой собственный сеанс подключения к базе данных через механизм внедрения зависимостей, поэтому в механизме 
по умолчанию нет необходимости.
"""

